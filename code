import gradio as gr
import torch
from torchvision import transforms, models
from PIL import Image
import requests

# ImageNet sınıf etiketlerini almak için
def get_imagenet_labels():
    url = "https://raw.githubusercontent.com/pytorch/hub/master/imagenet_classes.txt"
    response = requests.get(url)
    labels = response.text.splitlines()
    return labels

# ResNet50 modelini yükle
def load_resnet_model():
    model = models.resnet50(pretrained=True)
    model.eval()  # Modeli değerlendirme modunda ayarla
    return model

# Görüntü ön işleme fonksiyonu
def preprocess_image(image):
    # Görüntüleri 224x224 boyutuna küçült
    preprocess = transforms.Compose([
        transforms.Resize(256),
        transforms.CenterCrop(224),
        transforms.ToTensor(),
        transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]),
    ])
    input_tensor = preprocess(image)
    input_batch = input_tensor.unsqueeze(0)
    return input_batch

# Sınıflandırma ve sonuçları alma
def classify_with_resnet(image):
    # Görüntüyü işleme
    input_batch = preprocess_image(image)
    
    # Modeli yükle
    model = load_resnet_model()
    
    # Modeli çalıştır
    with torch.no_grad():
        output = model(input_batch)
        probabilities = torch.nn.functional.softmax(output[0], dim=0)
    
    # En yüksek 5 olasılığı al
    top5_prob, top5_catid = torch.topk(probabilities, 5)
    
    # ImageNet etiketlerini al
    imagenet_labels = get_imagenet_labels()
    
    # Sadece hayvan sınıflarına odaklanalım
    animal_keywords = ["dog", "cat", "horse", "bird", "fish", "rabbit", "hamster", "turtle", "elephant", "cow", "sheep", "goat", "duck", "hen", "lion", "tiger", "bear", "panda"]
    
    filtered_results = []
    for i in range(5):
        label_index = top5_catid[i].item()
        label = imagenet_labels[label_index]
        
        # Eğer sınıf hayvan kategorisindeyse, sonuca ekle
        if any(animal in label.lower() for animal in animal_keywords):
            prob = top5_prob[i].item() * 100
            filtered_results.append(f"{label}: {prob:.2f}%")
    
    if filtered_results:
        top_class = filtered_results[0]  # En yüksek ihtimalli hayvan sınıfı
        return top_class, "\n".join(filtered_results)
    else:
        return "Bu görsel bir hayvan içermiyor.", "Hayvan sınıfı bulunamadı."

# Gradio arayüzü
def create_interface():
    with gr.Blocks() as interface:
        gr.Markdown("# 🐶 Hayvan Sınıflandırıcı")
        gr.Markdown("Yüklediğiniz hayvan fotoğraflarını yapay zeka ile sınıflandırabilirsiniz.")
        
        with gr.Row():
            with gr.Column():
                # Giriş bileşenleri
                image_input = gr.Image(type="pil", label="Bir görüntü yükleyin")
                classify_btn = gr.Button("Sınıflandır")
                
            with gr.Column():
                # Çıktı bileşenleri
                top_class = gr.Textbox(label="En Olası Sınıf")
                result_output = gr.Textbox(label="İlk 5 Sınıf Sonucu", lines=5)
        
        # Buton tıklandığında sınıflandırma işlemini gerçekleştir
        classify_btn.click(
            fn=classify_with_resnet,
            inputs=[image_input],
            outputs=[top_class, result_output]
        )
    
    return interface

# Uygulamayı başlat
if __name__ == "__main__":
    interface = create_interface()
    interface.launch(share=True)  # Share=True ile internet üzerinden erişilebilir hale gelir
